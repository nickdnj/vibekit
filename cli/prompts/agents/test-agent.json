{
  "version": "2.0.0",
  "agent": "test",
  "name": "VibeKit Test Strategy Document Generator",
  "description": "Expert QA architect specialized in comprehensive testing strategies for Flutter+Firebase applications built on VibeKit",
  "metadata": {
    "created": "2024-09-03",
    "author": "VibeKit Team",
    "tags": ["test", "qa", "strategy", "flutter", "firebase", "vibekit"],
    "source": "custom-gpt-optimized",
    "expertise": "qa-architecture"
  },
  "config": {
    "temperature": 0.6,
    "structured_output": true,
    "markdown_format": true,
    "max_tokens": 5000
  },
  "prompts": {
    "system": "You are an expert QA Architect and Test Strategy specialist working with the product owner to generate a comprehensive Test Strategy Document (TEST) for a VibeKit-generated Flutter application.\n\nVibeKit Testing Foundation:\n- **Framework**: Flutter with built-in testing framework + Firebase Test Lab\n- **Backend Testing**: Firebase Emulator Suite (Auth, Firestore, Storage, Functions) for local testing\n- **Architecture Testing**: Clean architecture with fully testable layers (UI → Providers → Repositories → Services → Firebase)\n- **State Management Testing**: Riverpod provider testing with mockito and comprehensive state validation\n- **Platform Testing**: {{platforms}} with platform-specific testing strategies and device coverage\n- **CI/CD Testing**: GitHub Actions with automated test execution and quality gates\n- **Security Testing**: Firebase security rules validation and penetration testing\n- **Performance Testing**: Firebase Performance Monitoring with real-user metrics\n- **Integration Testing**: Comprehensive Firebase service integration validation\n\nYour role is to analyze the Product Requirements Document (PRD) and Software Architecture Document (SAD) to create a practical, comprehensive testing strategy that ensures quality, reliability, security, and performance. Your output will be in markdown format, concise, and intended to help other large language models understand the testing approach for development assistance.\n\nYour process follows these steps:\n1. Analyze the provided PRD and SAD to understand app functionality, user workflows, and technical architecture\n2. If documents are missing or incomplete, ask for clarification on specific features, critical paths, and technical requirements\n3. Generate a structured TEST document using proven testing methodologies specifically adapted for VibeKit's Flutter+Firebase stack\n4. Focus on practical, implementable testing strategies that developers can execute immediately with clear success criteria\n5. Ensure comprehensive coverage of functional, performance, security, and accessibility testing",

    "document_analysis": "Analyze the provided PRD and SAD documents to extract testing requirements:\n\n**From PRD Analysis:**\n- Core app features and functionality that require testing coverage\n- User workflows and critical business paths that need end-to-end validation\n- Target audience and usage patterns that affect testing scenarios\n- Business logic and rules that need comprehensive validation\n- Platform-specific features and requirements\n- Success metrics that need testing validation\n\n**From SAD Analysis:**\n- Technical architecture components that need unit and integration testing\n- Firebase service integrations and their testing requirements\n- Data flow patterns and state management testing needs\n- API endpoints and external integrations requiring validation\n- Security architecture and authentication testing requirements\n- Performance considerations and scalability testing needs\n\n**Testing Priority Assessment:**\n- Identify the most critical features for comprehensive testing based on business impact\n- Determine high-risk areas that need extensive testing coverage\n- Assess technical complexity and integration points requiring focused testing\n- Evaluate user experience critical paths that cannot fail",

    "clarifying_questions": {
      "missing_prd": "I need the Product Requirements Document (PRD) to understand what features and user workflows need testing coverage. Could you provide it or describe the core app functionality and critical user paths?",
      "missing_sad": "I need the Software Architecture Document (SAD) to understand the technical implementation and architecture for comprehensive testing strategy. Could you provide it or describe the app's technical architecture?",
      "critical_features": "Which features are absolutely critical for your app's success? These will receive the most comprehensive testing coverage.",
      "user_workflows": "What are the most important user workflows that cannot fail? These become our primary end-to-end test scenarios.",
      "performance_requirements": "Are there specific performance requirements, SLAs, or user experience benchmarks I should build testing around?",
      "compliance_requirements": "Does your app need to meet specific compliance standards (HIPAA, GDPR, PCI, accessibility standards) that affect testing requirements?",
      "integration_complexity": "What external services, APIs, or complex integrations does your app have that need specialized testing approaches?",
      "scale_expectations": "What's your expected user scale and growth? This affects performance and load testing strategies.",
      "platform_priorities": "Which platform is most critical for your business? This helps prioritize testing efforts and resource allocation."
    },

    "document_template": "# Test Strategy Document (TEST)\n\n**Product**: {{appName}}\n**Version**: 1.0\n**Date**: {{timestamp}}\n**Platforms**: {{platforms}}\n**Testing Framework**: Flutter + Firebase + VibeKit Foundation\n**QA Approach**: Risk-based testing with comprehensive automation\n\n---\n\n## Testing Philosophy\n\n{{appName}} follows a comprehensive, risk-based testing strategy built on VibeKit's proven Flutter+Firebase testing infrastructure. Our approach ensures quality, reliability, security, and performance across all platforms while focusing testing efforts on the highest-impact areas.\n\n### Core Testing Principles\n- **Quality First**: Every feature is thoroughly tested before deployment with clear acceptance criteria\n- **Risk-Based**: Testing effort prioritized by business impact and technical complexity\n- **Platform Consistency**: Identical core functionality across {{platforms}} with platform-specific optimizations\n- **Firebase Integration**: Robust testing of all Firebase service interactions using emulators and real environments\n- **User-Centric**: Testing focuses on real user workflows and critical business paths\n- **Automation First**: Comprehensive CI/CD pipeline with automated test execution and quality gates\n- **Performance Driven**: Continuous monitoring and testing of app performance and Firebase service latency\n- **Security Focused**: Proactive security testing and vulnerability assessment\n\n{{testingPhilosophyDetails}}\n\n---\n\n## Test Pyramid Strategy\n\n### Unit Tests (70% - Foundation Layer)\n**VibeKit Standard Components (Pre-tested):**\n- ✅ Authentication services and user management\n- ✅ Admin dashboard functionality and role management\n- ✅ Firebase service integrations (Auth, Firestore, Storage)\n- ✅ Core Riverpod providers and state management\n- ✅ Security rules and access control\n\n**App-Specific Unit Testing:**\n{{unitTestingStrategy}}\n\n**Unit Test Coverage Requirements:**\n- Business logic: 95% coverage\n- Data models: 100% coverage (serialization/deserialization)\n- Repositories: 90% coverage with mocked Firebase services\n- Services: 85% coverage with comprehensive error handling\n- Utilities: 100% coverage for helper functions\n\n### Integration Tests (20% - Service Integration Layer)\n**VibeKit Firebase Integration Testing:**\n- **Authentication Flow**: Complete sign-in/sign-up workflows with Firebase Auth emulators\n- **Database Operations**: Firestore CRUD operations with security rules validation\n- **File Operations**: Firebase Storage upload/download with access control testing\n- **Cloud Functions**: Function integration with authentication and error handling\n- **Admin Operations**: Role-based access testing and admin dashboard functionality\n- **Real-time Features**: Firestore listeners and real-time data synchronization\n\n**App-Specific Integration Testing:**\n{{integrationTestingStrategy}}\n\n### End-to-End Tests (10% - Critical User Journey Layer)\n**Priority User Workflows:**\n{{e2eTestingStrategy}}\n\n**Platform-Specific E2E Testing:**\n{{platformE2EStrategy}}\n\n**E2E Test Environment:**\n- **Web**: Headless Chrome with Selenium WebDriver\n- **iOS**: iOS Simulator with XCUITest integration\n- **Android**: Android Emulator with Espresso framework\n- **Cross-Platform**: Flutter integration_test package for unified testing\n\n---\n\n## Testing Framework & Infrastructure\n\n### Flutter Testing Stack\n```dart\n// Unit Testing\ntest('should validate business logic', () {\n  // Arrange, Act, Assert pattern\n});\n\n// Widget Testing\ntestWidgets('should render component correctly', (tester) async {\n  // Widget testing with golden tests\n});\n\n// Integration Testing\nintegrationTest('should complete user workflow', (tester) async {\n  // End-to-end user journey testing\n});\n```\n\n### Firebase Testing Infrastructure\n```bash\n# Local Development Testing\nfirebase emulators:start --only auth,firestore,storage,functions\nflutter test --dart-define=USE_FIREBASE_EMULATOR=true\n\n# CI/CD Testing\nfirebase emulators:exec \"flutter test --coverage\" --project={{firebaseProjectId}}\n```\n\n### Platform-Specific Testing Tools\n{{platformTestingTools}}\n\n---\n\n## Test Environment Strategy\n\n### Development Environment Setup\n```bash\n# VibeKit Standard Testing Setup\nflutter pub get\nflutter packages pub run build_runner build\n\n# Firebase Emulator Suite Installation\nnpm install -g firebase-tools\nfirebase setup:emulators:firestore\nfirebase setup:emulators:auth  \nfirebase setup:emulators:storage\nfirebase setup:emulators:functions\n\n# Run Comprehensive Test Suite\nfirebase emulators:exec \"flutter test --coverage --reporter=github\"\n```\n\n### Test Data Management\n{{testDataManagement}}\n\n### Environment Configuration\n- **Local**: Firebase emulators with test data fixtures\n- **Staging**: Real Firebase project with staging data\n- **Production**: Read-only testing with anonymized data\n- **CI/CD**: Ephemeral test environments with automated cleanup\n\n---\n\n## Feature-Specific Testing Strategy\n\n{{featureTestingBreakdown}}\n\n---\n\n## Security Testing Strategy\n\n### VibeKit Security Foundation Testing\n- **Firebase Auth**: Token validation, custom claims, and session management\n- **Firestore Security Rules**: Owner-only access, admin privileges, and data isolation\n- **Storage Security Rules**: File access permissions and upload validation\n- **App Check**: Client verification and abuse prevention testing\n- **HTTPS Enforcement**: All network communications encrypted and validated\n\n### App-Specific Security Testing\n{{securityTestingStrategy}}\n\n### Security Testing Tools\n- **Static Analysis**: `dart analyze` with security-focused rules\n- **Dynamic Testing**: Firebase security rules testing framework\n- **Penetration Testing**: Automated security scanning and manual testing\n- **Dependency Scanning**: Regular updates and vulnerability assessment\n\n---\n\n## Performance Testing Strategy\n\n### Application Performance Benchmarks\n- **App Startup**: <3 seconds to first meaningful paint\n- **Navigation**: Smooth 60fps transitions between all screens\n- **Data Loading**: Firestore queries optimized with pagination (<1 second)\n- **Image Loading**: Progressive loading with caching (<2 seconds)\n- **Offline Functionality**: Seamless offline/online transitions\n\n### Firebase Performance Testing\n- **Network Latency**: Monitor Firebase service response times across regions\n- **Concurrent Users**: Test multi-user scenarios and data conflict resolution\n- **Storage Throughput**: File upload/download speed optimization and testing\n- **Function Performance**: Cloud Functions cold start and execution time monitoring\n- **Database Performance**: Query optimization and index effectiveness\n\n### Platform-Specific Performance\n{{platformPerformanceStrategy}}\n\n### Performance Testing Tools\n- **Flutter**: DevTools for performance profiling and memory analysis\n- **Firebase**: Performance Monitoring for real-user metrics\n- **Web**: Lighthouse CI for Core Web Vitals and performance scores\n- **Mobile**: Platform-specific profiling tools (Xcode Instruments, Android Profiler)\n\n---\n\n## Accessibility Testing Strategy\n\n### WCAG 2.1 AA Compliance Testing\n- **Color Contrast**: Automated testing for minimum 4.5:1 contrast ratio\n- **Screen Reader**: Comprehensive testing with VoiceOver (iOS) and TalkBack (Android)\n- **Keyboard Navigation**: Full keyboard accessibility testing for web platform\n- **Touch Targets**: Automated validation of minimum 44px touch target sizes\n- **Dynamic Type**: Text scaling testing up to 200% user preference\n- **Focus Management**: Logical tab order and focus indicator testing\n\n### Platform-Specific Accessibility Testing\n{{accessibilityTestingStrategy}}\n\n### Accessibility Testing Integration\n- **Automated**: Accessibility scanner integration in CI/CD pipeline\n- **Manual**: Regular testing with assistive technologies\n- **User Testing**: Validation with users who rely on accessibility features\n\n---\n\n## Test Automation Pipeline\n\n### Pre-Commit Quality Gates\n```bash\n# Automated Pre-Commit Checks\ndart analyze                                    # Static analysis\ndart format --set-exit-if-changed .            # Code formatting\nflutter test --coverage                        # Unit and widget tests\nfirebase emulators:exec \"flutter test\"         # Integration tests\n```\n\n### Continuous Integration (GitHub Actions)\n```yaml\nname: Comprehensive Test Suite\non: [push, pull_request]\n\njobs:\n  test:\n    strategy:\n      matrix:\n        platform: [web, android, ios]\n        flutter-version: [3.24.x]\n        \n    steps:\n      - Unit Tests: Core business logic validation\n      - Widget Tests: UI component testing with golden tests\n      - Integration Tests: Firebase emulator integration\n      - E2E Tests: Critical user journey automation\n      - Performance Tests: Startup and navigation benchmarks\n      - Security Tests: Firebase rules and authentication validation\n      - Accessibility Tests: WCAG compliance and screen reader testing\n      - Coverage Report: Minimum 80% coverage requirement\n```\n\n### Release Testing Pipeline\n{{releaseTestingPipeline}}\n\n---\n\n## Risk Assessment & Critical Path Testing\n\n### High-Risk Areas (Priority 1 Testing)\n{{highRiskAreas}}\n\n### Medium-Risk Areas (Priority 2 Testing)\n{{mediumRiskAreas}}\n\n### Testing Gap Analysis\n{{testingGapAnalysis}}\n\n### Risk Mitigation Strategies\n{{riskMitigationStrategies}}\n\n---\n\n## Quality Metrics & Success Criteria\n\n### Test Quality Metrics\n- **Code Coverage**: Minimum 80% overall, 95% for critical business logic\n- **Test Execution Time**: Full test suite completes in <10 minutes\n- **Test Reliability**: <1% flaky test rate with automatic retry mechanisms\n- **Bug Detection Rate**: 95% of bugs caught before production deployment\n- **Security Coverage**: 100% of security-critical paths tested\n\n### Application Quality Metrics\n- **Crash Rate**: <0.1% across all platforms with detailed crash reporting\n- **Performance**: 95th percentile app startup <3 seconds\n- **User Experience**: App store rating >4.5 stars with positive feedback\n- **Firebase Efficiency**: <80% of Firebase service quotas with cost optimization\n- **Security Incidents**: Zero security breaches with proactive monitoring\n\n### Platform-Specific Quality Gates\n{{platformQualityMetrics}}\n\n---\n\n## Testing Implementation Roadmap\n\n### Week 1: Foundation & Critical Path Testing\n- **Day 1-2**: Set up Firebase emulators and comprehensive test environment\n- **Day 3-4**: Implement unit tests for core business logic and data models\n- **Day 5**: Create test data fixtures, utilities, and helper functions\n- **Deliverable**: Basic test infrastructure with critical feature coverage\n\n### Week 2: Integration & Firebase Testing\n- **Day 1-2**: Firebase service integration testing with emulator validation\n- **Day 3-4**: Authentication flow testing and security rules validation\n- **Day 5**: Database operations testing with comprehensive CRUD coverage\n- **Deliverable**: Complete Firebase integration test suite\n\n### Week 3: User Experience & Platform Testing\n- **Day 1-2**: End-to-end user journey automation for critical paths\n- **Day 3-4**: Platform-specific testing implementation and device coverage\n- **Day 5**: Accessibility compliance testing and validation\n- **Deliverable**: Comprehensive user experience test coverage\n\n### Week 4: Performance, Security & Production Readiness\n- **Day 1-2**: Performance testing, load testing, and benchmark establishment\n- **Day 3**: Security testing, penetration testing, and vulnerability assessment\n- **Day 4**: CI/CD pipeline integration with automated quality gates\n- **Day 5**: Documentation, team training, and production deployment validation\n- **Deliverable**: Production-ready testing infrastructure\n\n{{implementationRoadmapDetails}}\n\n---\n\n## Test Data & Environment Management\n\n### Test Data Strategy\n{{testDataStrategy}}\n\n### Environment Management\n- **Local Development**: Firebase emulators with consistent test data\n- **Continuous Integration**: Ephemeral test environments with automated setup/teardown\n- **Staging Environment**: Real Firebase services with staging data for integration validation\n- **Production Monitoring**: Read-only testing and real-user monitoring\n\n### Data Privacy & Compliance\n{{dataPrivacyTesting}}\n\n---\n\n## Team Integration & Process\n\n### Developer Testing Guidelines\n{{developerTestingGuidelines}}\n\n### QA Process Integration\n- **Test Planning**: Collaborative test planning with product and development teams\n- **Test Execution**: Automated execution with manual validation for critical paths\n- **Bug Triage**: Structured bug reporting with severity classification and reproduction steps\n- **Release Validation**: Comprehensive release testing checklist with sign-off criteria\n\n### Testing Best Practices\n{{testingBestPractices}}\n\n---\n\n## Monitoring & Continuous Improvement\n\n### Test Suite Monitoring\n- **Execution Metrics**: Test run time, success rate, and failure analysis\n- **Coverage Tracking**: Code coverage trends and gap identification\n- **Performance Monitoring**: Test execution performance and optimization\n- **Quality Trends**: Bug detection rate and production issue correlation\n\n### Continuous Improvement Process\n{{continuousImprovementStrategy}}\n\n### Testing Tool Evolution\n- **Framework Updates**: Regular updates to testing frameworks and tools\n- **New Testing Capabilities**: Integration of emerging testing technologies\n- **Performance Optimization**: Continuous optimization of test execution speed\n- **Team Training**: Regular training on testing best practices and new tools\n\n---\n\n## Emergency Response & Recovery Testing\n\n### Disaster Recovery Testing\n{{disasterRecoveryTesting}}\n\n### Incident Response Testing\n{{incidentResponseTesting}}\n\n---\n\n## Development Notes\n\nThis TEST document was generated using VibeKit AI Agent v{{version}} on {{timestamp}}.\n\n**VibeKit Testing Advantages**:\n- Proven testing patterns and infrastructure ready to use\n- Firebase Emulator Suite integration for reliable local testing\n- Platform-specific testing strategies with device coverage\n- Automated CI/CD pipeline templates with quality gates\n- Performance monitoring and security testing built-in\n- Clean architecture enables comprehensive unit testing\n- Riverpod state management simplifies UI testing\n\n**Implementation Priority Checklist**:\n- [ ] Set up Firebase emulators and local test environment\n- [ ] Implement unit tests for app-specific business logic (Week 1)\n- [ ] Create integration tests for Firebase service interactions (Week 2)\n- [ ] Build end-to-end tests for critical user workflows (Week 3)\n- [ ] Establish performance and security testing baselines (Week 4)\n- [ ] Deploy comprehensive CI/CD pipeline with automated quality gates\n- [ ] Train development team on testing best practices and tools\n- [ ] Set up production monitoring and alerting systems\n\n**Testing Success Criteria**:\n- 80%+ code coverage with 95% coverage for critical business logic\n- <10 minute full test suite execution time\n- <1% flaky test rate with reliable automation\n- <0.1% production crash rate across all platforms\n- 100% critical user journey test coverage\n- Zero security vulnerabilities in production\n- Performance benchmarks met for all target platforms\n\n**Next Steps**:\n1. Review this TEST strategy with development and product teams\n2. Set up local testing environment following VibeKit guidelines\n3. Begin implementation with highest-priority unit tests for core features\n4. Establish Firebase emulator integration for reliable testing\n5. Create automated CI/CD pipeline with comprehensive test execution\n6. Train team on testing best practices and VibeKit testing patterns\n7. Monitor and continuously improve testing effectiveness based on metrics"
  }
}
